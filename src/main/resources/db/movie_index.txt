##elastic search中的movie索引结构及数据
PUT /movie_index
{
  "mappings": {
    "info": {
      "properties": {
        "actors": {
          "type": "text",
          "analyzer":"ik_smart"
        },
        "alias": {
          "type": "text",
          "analyzer":"ik_smart"
        },
        "directors": {
          "type": "text",
          "analyzer":"ik_smart"
        },
        "introduction": {
          "type": "text",
          "analyzer":"ik_smart"
        },
        "label": {
          "type": "text",
          "analyzer":"ik_smart"
        },
        "name": {
          "type": "text",
          "analyzer":"ik_smart"
        },
        "score": {
          "type": "float"
        },
        "release": {
          "type": "date"
        },
        "area": {
          "type": "keyword"
        },
        "picurl": {
          "type": "keyword"
        },
        "id":{
          "type":"integer"
        }
      }
    }
  }
}

POST /movie_index/info
{
  "id":"2",
  "name": "毒液",
  "alias": "毒液",
  "actors": "汤姆·哈迪 米歇尔·威廉姆斯 伍迪·哈里森 里兹·阿迈德 珍妮·斯蕾特",
  "directors": "鲁本·弗雷斯彻",
  "score": 9,
  "area": "美国",
  "picurl": "http://img24.pplive.cn/cs180x240/2019/01/07/15295000199.jpg",
  "label": "2018年 美国 电影 动作 好莱坞 VIP电影 VIP尊享 动作 新片",
  "release": "2019",
  "introduction": "017年3月17日，索尼宣布将为蜘蛛侠的死对头“毒液”（Venom）打造外传电影，并计划于2018年10月5日上映。《毒液》被视作蜘蛛侠系列的外传，将由《超凡蜘蛛侠2》的编剧艾里克斯·库兹曼（《木乃伊》）执导，《蜘蛛侠：英雄归来》的制片人马修·托马齐以及漫威影业前CEO阿维·阿拉德担任制片，由丹特·哈珀（《明日边缘》）编剧。他们表示，此片与汤姆·赫兰德主演的蜘蛛侠三部曲没什么关系，是一个独立的外传。关于此片的更多细节并未透露。 　　2017年3月28日，索尼确认《毒液》将以R级的形式进行开发。 　　2017年5月，确认英国演员汤姆·哈迪将出演漫威蜘蛛侠衍生片《毒液》，将扮演自由摄影师Eddie Brock 。 　　2017年6月，制片人艾米·帕斯卡尔证实影片将和漫威电影宇宙连接，作为附属电影，并且有机会让汤姆·赫兰德回归饰演蜘蛛侠。"
}

POST /movie_index/info
{
  "id":"1",
  "name": "我不是药神",
  "alias": "我不是药神",
  "actors": "徐峥 王传君 周一围 谭卓 章宇",
  "directors": "文牧野",
  "score": 9.2,
  "area": "内地",
  "picurl": "http://img24.pplive.cn/cs180x240/2018/11/08/12041958494.jpg",
  "label": "国内院线 VIP电影 剧情 VIP尊享 院线 喜剧 喜剧 新片 剧情",
  "release": "2018",
  "introduction": "普通中年男子程勇（徐峥 饰）经营着一家保健品店，失意又失婚。不速之客吕受益（王传君 饰）的到来，让他开辟了一条去印度买药做“代购”的新事业，虽然困难重重，但他在这条“买药之路”上发现了商机，一发不可收拾地做起了治疗慢粒白血病的印度仿制药独家代理商。赚钱的同时，他也认识了几个病患及家属，为救女儿被迫做舞女的思慧（谭卓 饰）、说一口流利“神父腔”英语的刘牧师（杨新鸣 饰），以及脾气暴烈的“黄毛”（章宇 饰），几个人合伙做起了生意，利润倍增的同时也危机四伏。程勇昔日的小舅子曹警官（周一围 饰）奉命调查仿制药的源头，假药贩子张长林（王砚辉 饰）和瑞士正牌医药代表（李乃文 饰）也对其虎视眈眈，生意逐渐变成了一场关于救赎的拉锯战。"
}

POST /movie_index/info
{
  "id":"3",
  "name": "纳尼亚传奇",
  "alias": "纳尼亚传奇",
  "actors": "蒂尔达·斯文顿 安娜·帕波维尔 威廉·莫斯里 斯堪德·凯恩斯 乔基·亨莉 连姆·尼森 吉姆·布劳德本特 詹姆斯·卡沙莫",
  "directors": "安德鲁·亚当森",
  "score": 8.2,
  "area": "美国",
  "picurl": "http://img24.pplive.cn/cs180x240/2011/05/04/12523944913.jpg",
  "label": "好莱坞 VIP尊享 奇幻 冒险 冒险 剧情 剧情",
  "release": "2005",
  "introduction": "第二次世界大战期间，英国伦敦饱受空袭威胁，孩童都被疏散到乡间避难，皮芬家的四位兄弟姐妹－彼得、苏珊、爱德蒙、露西，被安排到一位老教授狄哥里寇克的乡间大宅暂住。在这占地辽阔、房间众多的宅邸之中，小妹露西发现了一个奇特的魔衣橱，居然可以通往神奇的奇幻国度－纳尼亚。露西在纳尼亚王国遇到一位和蔼可亲的人羊吐纳思先生，并跟他成为好朋友。事后露西将亲身经验告诉兄姐，起初他们并不信，但后来在一次意外情况下，他们终于也进入魔衣橱，随着微暗的灯光踏上灯野，正式造访了纳尼亚。 　　当时的纳尼亚正被邪恶势力给笼罩着，千年不死的白女巫贾迪丝暴政统治整个王国，把纳尼亚变成一片常年寒冬的冰天雪地，古老预言中提到有四位「亚当之子」和「夏娃之女」将结束她的邪恶统治，因此当女巫知道有四个人类孩子如今造访纳尼亚，就决心要将他们一网打尽。她用计蛊惑四孩子之中意志不坚的男孩爱德蒙，要他把其它三人带到女巫城堡，当大家来到海狸夫妇家中用餐时，爱德蒙就偷偷跑去向女巫通风报信。"
}


POST /movie_index/info
{
  "id":"4",
  "name": "古墓丽影2",
  "alias": "古墓丽影2",
  "actors": "安吉丽娜·朱莉 杰拉德·巴特勒 塞伦·希德 诺亚·泰勒 杰曼·翰苏 蒂尔·施威格 任达华 尹子维",
  "directors": "Bont Jan De",
  "score": 8.1,
  "area": "日本",
  "picurl": "http://img24.pplive.cn/cs180x240/2008/03/13/20275265440.jpg",
  "label": "VIP尊享 好莱坞 动作 惊悚 魔幻 恐怖 动作 科幻",
  "release": "2003",
  "introduction": "罗拉•克劳福特（安吉丽娜•朱莉 饰）这名勇于挑战的探险家继续她的探索之路。这次是寻找早已沉入大海的月神庙。根据资料显示，月神庙内埋藏了传说中的“潘朵拉魔盒”。而一股巨大的能量正存在与这个魔盒当中，同时间邪恶的势力也对这个股力量虎视眈眈。因为这股力量的巨大能足以摧毁整个人类世界，邪恶的势力企图利用的话后果不堪设想。 　　罗拉一边寻找这股传说中的神奇力量，一边与香港黑帮的头目斗智斗勇。到底罗拉能不能顺利获得这股力量，保卫整个人类世界的安全呢？"
}

GET /movie_index/info/_search   查询
##mysql中对应的movie表数据


//一来字典很大，性能会很差；二来排序结果是字典里的词，而并非一碰到这个错误是因为你尝试对一个文本类型的划分做排序
//，而文本类型的分割是要分词的。整个文本的内容。出于这2点原因，ES5.x以后对于文本类型默认禁用了fielddata，
//防止对文本字段一些错误的操作（排序，聚合，脚本）而给堆造成很大的压力。
    //分组设置   关键字分区是通过doc值排序的，内存消耗远小于fielddata。
PUT my_index
{
  “ mappings”：{
    “ my_type”：{
      “ properties”：{
        “ city”：{
          “ type”：“ text”，
          “ fields”：{
            “ raw”：{ 
              “ type”：“ keyword”
            }
          }
        }
      }
    }
  }
}

{   # 指定url地址  索引名称
    "settings": {
        "index": {
            "number_of_shards": 2, #分区数
            "number_of_replicas": 1##副本数
        }
    },
    "mappings": {
        "info": {
            "properties": {
		             "id": {
						"type": "long"
					},
					"abbreviation": {
				          "type": "completion",
				          "analyzer": "simple"
				        },
				        "content": {//ik样例
                "type": "text",
                "analyzer": "ik_max_word",
                "search_analyzer": "ik_smart"
            },
            "name": {   //pinyin  样例   还需要设置参考  https://github.com/medcl/elasticsearch-analysis-pinyin
                "type": "keyword",
                "fields": {
                    "pinyin": {
                        "type": "text",
                        "store": false,
                        "term_vector": "with_offsets",
                        "analyzer": "pinyin_analyzer",
                        "boost": 10
                    }
                }
            }
            
				        "title" : {
				          "type": "text",
				          "analyzer": "ik_max_word", //分析器：ik_smart，，分词器ik_max_word：ik_smart，ik_max_word
ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query；

ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询。				       
				          "fields": {
				            "suggest" : {
				              "type" : "completion",
				              "analyzer": "ik_max_word"
				            }
				          }
				        },

					"categoryName": {  //支持分组
						"type": "text",
						"analyzer": "ik_max_word",//standard  /simple
						"fields": {
							"keyword": {
								"type": "keyword"  //同一个字段中，既实现正排索引，又实现倒排索引
							}
						}
					},
			"ecommerce_join_field" : {
			          "type" : "join",
			          "relations" : {
			            "category" : "product"
			          }
			      }
                "referer": {
                    "type": "string", #类型
                    "index": "not_analyzed" #设置不分词
                },        
                "dip": {
                    "type": "ip",
                    "index": "not_analyzed"
                },
                "starttime": {
                    "type": "date", #日期类型
                    "format": "yyy-MM-dd HH:mm:ss"
                },
               "createDate": {
                  "type": "date",
                  "format": "yyyy-MM-dd HH:mm:ss"
              }
                "type": {
                    "type": "integer",
                    "index": "not_analyzed"
                },
 		"id": {
          "type": "long",
          "index": false
        },
               
                
                
            }
        }
    }
}
————————————————
版权声明：本文为CSDN博主「chenzhenguo123」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/chenzhenguo123/java/article/details/84789636
https://blog.csdn.net/miaomiao19971215/article/details/105720737    数据建模类型